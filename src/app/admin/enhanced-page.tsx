// WORLD-CLASS ADMIN DASHBOARD
// High-performance, secure, responsive dashboard with real-time updates

'use client';

import React, { useState, useEffect, useMemo, useCallback, Suspense } from 'react';
import dynamic from 'next/dynamic';
import { 
  Users, Store, ShoppingCart, DollarSign, TrendingUp, BarChart3, 
  AlertTriangle, CheckCircle, Clock, ArrowUpRight, ArrowDownRight,
  RefreshCw, Filter, Download, Calendar, MapPin, Star, Activity
} from 'lucide-react';
import { requireAuth, User } from '@/lib/auth';
import DashboardLayout from '@/components/admin/DashboardLayout';

// Dynamic imports for better performance - placeholders for now
// const Chart = dynamic(() => import('react-chartjs-2'), { ssr: false });
// const Map = dynamic(() => import('@/components/admin/StoreMap'), { 
//   ssr: false,
//   loading: () => <div className="h-64 bg-gray-100 rounded-lg animate-pulse" />
// });

interface DashboardMetrics {
  totalStores: number;
  activeStores: number;
  pendingStores: number;
  suspendedStores: number;
  totalUsers: number;
  totalOrders: number;
  totalRevenue: number;
  platformCommission: number;
  monthlyGrowth: number;
  revenueGrowth: number;
  orderGrowth: number;
  userGrowth: number;
}

interface StoreApplication {
  id: string;
  name: string;
  ownerName: string;
  email: string;
  phone: string;
  businessType: string;
  city: string;
  submittedAt: Date;
  status: 'pending' | 'under_review' | 'approved' | 'rejected';
  documentsVerified: boolean;
  rating?: number;
}

interface RecentActivity {
  id: string;
  type: 'store_approved' | 'store_rejected' | 'new_order' | 'user_signup' | 'payment_received';
  title: string;
  description: string;
  timestamp: Date;
  metadata?: any;
}

// Memoized Metric Card Component
const MetricCard = React.memo(({ 
  title, 
  value, 
  change, 
  icon: Icon, 
  color = 'blue',
  format = 'number',
  loading = false 
}: {
  title: string;
  value: number | string;
  change?: number;
  icon: React.ComponentType<{ className?: string }>;
  color?: 'blue' | 'green' | 'purple' | 'orange' | 'red';
  format?: 'number' | 'currency' | 'percentage';
  loading?: boolean;
}) => {
  const colorClasses = {
    blue: 'from-blue-500 to-blue-600',
    green: 'from-green-500 to-green-600', 
    purple: 'from-purple-500 to-purple-600',
    orange: 'from-orange-500 to-orange-600',
    red: 'from-red-500 to-red-600'
  };

  const formatValue = (val: number | string) => {
    if (typeof val === 'string') return val;
    
    switch (format) {
      case 'currency':\n        return `â‚¦${val.toLocaleString()}`;\n      case 'percentage':\n        return `${val}%`;\n      default:\n        return val.toLocaleString();\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"bg-white rounded-xl p-6 shadow-sm border border-gray-200\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-gray-200 rounded w-24 mb-2\"></div>\n          <div className=\"h-8 bg-gray-200 rounded w-32 mb-2\"></div>\n          <div className=\"h-3 bg-gray-200 rounded w-20\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-xl p-6 shadow-sm border border-gray-200 hover:shadow-md transition-shadow\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex-1\">\n          <p className=\"text-sm font-medium text-gray-600 mb-1\">{title}</p>\n          <p className=\"text-3xl font-bold text-gray-900 mb-2\">\n            {formatValue(value)}\n          </p>\n          \n          {change !== undefined && (\n            <div className={`flex items-center text-sm ${\n              change >= 0 ? 'text-green-600' : 'text-red-600'\n            }`}>\n              {change >= 0 ? (\n                <ArrowUpRight className=\"h-4 w-4 mr-1\" />\n              ) : (\n                <ArrowDownRight className=\"h-4 w-4 mr-1\" />\n              )}\n              <span>{Math.abs(change)}% vs last month</span>\n            </div>\n          )}\n        </div>\n        \n        <div className={`w-14 h-14 rounded-xl bg-gradient-to-r ${colorClasses[color]} flex items-center justify-center`}>\n          <Icon className=\"h-7 w-7 text-white\" />\n        </div>\n      </div>\n    </div>\n  );\n});\n\nMetricCard.displayName = 'MetricCard';\n\n// Store Application Card Component\nconst StoreApplicationCard = React.memo(({ \n  application, \n  onApprove, \n  onReject, \n  onView \n}: {\n  application: StoreApplication;\n  onApprove: (id: string) => void;\n  onReject: (id: string) => void;\n  onView: (id: string) => void;\n}) => {\n  const statusColors = {\n    pending: 'bg-yellow-100 text-yellow-800',\n    under_review: 'bg-blue-100 text-blue-800',\n    approved: 'bg-green-100 text-green-800',\n    rejected: 'bg-red-100 text-red-800'\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg border border-gray-200 p-4 hover:shadow-md transition-shadow\">\n      <div className=\"flex items-start justify-between mb-3\">\n        <div className=\"flex-1\">\n          <h3 className=\"font-semibold text-gray-900 mb-1\">{application.name}</h3>\n          <p className=\"text-sm text-gray-600\">{application.ownerName}</p>\n          <p className=\"text-xs text-gray-500\">{application.email}</p>\n        </div>\n        \n        <span className={`px-2 py-1 rounded-full text-xs font-medium ${statusColors[application.status]}`}>\n          {application.status.replace('_', ' ')}\n        </span>\n      </div>\n      \n      <div className=\"flex items-center gap-4 text-xs text-gray-500 mb-3\">\n        <div className=\"flex items-center gap-1\">\n          <MapPin className=\"h-3 w-3\" />\n          {application.city}\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <Clock className=\"h-3 w-3\" />\n          {new Intl.RelativeTimeFormat('en').format(\n            Math.floor((application.submittedAt.getTime() - Date.now()) / (1000 * 60 * 60 * 24)), \n            'day'\n          )}\n        </div>\n        {application.documentsVerified && (\n          <div className=\"flex items-center gap-1 text-green-600\">\n            <CheckCircle className=\"h-3 w-3\" />\n            Verified\n          </div>\n        )}\n      </div>\n      \n      {application.status === 'pending' && (\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => onApprove(application.id)}\n            className=\"flex-1 bg-green-600 text-white px-3 py-1.5 rounded-lg text-sm font-medium hover:bg-green-700 transition-colors\"\n          >\n            Approve\n          </button>\n          <button\n            onClick={() => onReject(application.id)}\n            className=\"flex-1 bg-red-600 text-white px-3 py-1.5 rounded-lg text-sm font-medium hover:bg-red-700 transition-colors\"\n          >\n            Reject\n          </button>\n          <button\n            onClick={() => onView(application.id)}\n            className=\"px-3 py-1.5 border border-gray-300 rounded-lg text-sm font-medium hover:bg-gray-50 transition-colors\"\n          >\n            <Eye className=\"h-4 w-4\" />\n          </button>\n        </div>\n      )}\n    </div>\n  );\n});\n\nStoreApplicationCard.displayName = 'StoreApplicationCard';\n\n// Main Dashboard Component\nexport default function AdminDashboard() {\n  const [metrics, setMetrics] = useState<DashboardMetrics | null>(null);\n  const [applications, setApplications] = useState<StoreApplication[]>([]);\n  const [recentActivity, setRecentActivity] = useState<RecentActivity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false);\n  const [selectedPeriod, setSelectedPeriod] = useState('30d');\n  const [user, setUser] = useState<User | null>(null);\n\n  // Initialize user authentication\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        const authenticatedUser = await requireAuth(['platform_admin', 'support_agent']);\n        setUser(authenticatedUser);\n      } catch (error) {\n        console.error('Authentication failed:', error);\n        // Redirect to login handled by middleware\n      }\n    };\n    \n    initAuth();\n  }, []);\n\n  // Fetch dashboard data with caching and optimization\n  const fetchDashboardData = useCallback(async () => {\n    try {\n      setRefreshing(true);\n      \n      // Simulate API calls - replace with actual API endpoints\n      const [metricsResponse, applicationsResponse, activityResponse] = await Promise.all([\n        fetch(`/api/admin/metrics?period=${selectedPeriod}`),\n        fetch('/api/admin/store-applications?status=pending&limit=6'),\n        fetch('/api/admin/recent-activity?limit=10')\n      ]);\n      \n      if (metricsResponse.ok) {\n        const metricsData = await metricsResponse.json();\n        setMetrics(metricsData);\n      }\n      \n      if (applicationsResponse.ok) {\n        const applicationsData = await applicationsResponse.json();\n        setApplications(applicationsData.map((app: any) => ({\n          ...app,\n          submittedAt: new Date(app.submittedAt)\n        })));\n      }\n      \n      if (activityResponse.ok) {\n        const activityData = await activityResponse.json();\n        setRecentActivity(activityData.map((activity: any) => ({\n          ...activity,\n          timestamp: new Date(activity.timestamp)\n        })));\n      }\n      \n    } catch (error) {\n      console.error('Failed to fetch dashboard data:', error);\n      \n      // Fallback mock data for development\n      setMetrics({\n        totalStores: 156,\n        activeStores: 142,\n        pendingStores: 8,\n        suspendedStores: 6,\n        totalUsers: 2847,\n        totalOrders: 15340,\n        totalRevenue: 12450000,\n        platformCommission: 1875000,\n        monthlyGrowth: 24.5,\n        revenueGrowth: 18.3,\n        orderGrowth: 22.1,\n        userGrowth: 15.7\n      });\n      \n      setApplications([\n        {\n          id: '1',\n          name: 'Campus Fresh Market',\n          ownerName: 'John Doe',\n          email: 'john@campusfresh.com',\n          phone: '+2348012345678',\n          businessType: 'Food & Grocery',\n          city: 'Lagos',\n          submittedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n          status: 'pending',\n          documentsVerified: true\n        }\n      ]);\n      \n      setRecentActivity([\n        {\n          id: '1',\n          type: 'store_approved',\n          title: 'Store Approved',\n          description: 'QuickBites Lagos has been approved and activated',\n          timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000)\n        }\n      ]);\n    } finally {\n      setLoading(false);\n      setRefreshing(false);\n    }\n  }, [selectedPeriod]);\n\n  // Initial data load\n  useEffect(() => {\n    fetchDashboardData();\n  }, [fetchDashboardData]);\n\n  // Auto-refresh every 5 minutes\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (!refreshing) {\n        fetchDashboardData();\n      }\n    }, 5 * 60 * 1000);\n    \n    return () => clearInterval(interval);\n  }, [fetchDashboardData, refreshing]);\n\n  // Store approval handlers\n  const handleApproveStore = useCallback(async (storeId: string) => {\n    try {\n      const response = await fetch(`/api/admin/stores/${storeId}/approve`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      \n      if (response.ok) {\n        setApplications(prev => prev.filter(app => app.id !== storeId));\n        fetchDashboardData(); // Refresh metrics\n      }\n    } catch (error) {\n      console.error('Failed to approve store:', error);\n    }\n  }, [fetchDashboardData]);\n\n  const handleRejectStore = useCallback(async (storeId: string) => {\n    try {\n      const response = await fetch(`/api/admin/stores/${storeId}/reject`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ reason: 'Does not meet platform standards' })\n      });\n      \n      if (response.ok) {\n        setApplications(prev => prev.filter(app => app.id !== storeId));\n        fetchDashboardData();\n      }\n    } catch (error) {\n      console.error('Failed to reject store:', error);\n    }\n  }, [fetchDashboardData]);\n\n  const handleViewStore = useCallback((storeId: string) => {\n    window.open(`/admin/stores/${storeId}`, '_blank');\n  }, []);\n\n  // Memoized metric cards for performance\n  const metricCards = useMemo(() => {\n    if (!metrics) return [];\n    \n    return [\n      {\n        title: 'Total Revenue',\n        value: metrics.totalRevenue,\n        change: metrics.revenueGrowth,\n        icon: DollarSign,\n        color: 'green' as const,\n        format: 'currency' as const\n      },\n      {\n        title: 'Platform Commission',\n        value: metrics.platformCommission,\n        change: metrics.revenueGrowth * 0.8,\n        icon: TrendingUp,\n        color: 'blue' as const,\n        format: 'currency' as const\n      },\n      {\n        title: 'Active Stores',\n        value: metrics.activeStores,\n        change: metrics.monthlyGrowth,\n        icon: Store,\n        color: 'purple' as const\n      },\n      {\n        title: 'Total Orders',\n        value: metrics.totalOrders,\n        change: metrics.orderGrowth,\n        icon: ShoppingCart,\n        color: 'orange' as const\n      }\n    ];\n  }, [metrics]);\n\n  if (loading || !user) {\n    return (\n      <DashboardLayout user={user!} title=\"Loading...\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {[1,2,3,4].map(i => (\n            <MetricCard\n              key={i}\n              title=\"\"\n              value={0}\n              icon={Activity}\n              loading={true}\n            />\n          ))}\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout \n      user={user} \n      title=\"Platform Dashboard\"\n      subtitle=\"Monitor and manage your SaaS platform performance\"\n    >\n      {/* Header Actions */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center gap-4\">\n          <select \n            value={selectedPeriod}\n            onChange={(e) => setSelectedPeriod(e.target.value)}\n            className=\"px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"7d\">Last 7 days</option>\n            <option value=\"30d\">Last 30 days</option>\n            <option value=\"90d\">Last 90 days</option>\n            <option value=\"1y\">Last year</option>\n          </select>\n          \n          <button\n            onClick={fetchDashboardData}\n            disabled={refreshing}\n            className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 transition-colors\"\n          >\n            <RefreshCw className={`h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />\n            Refresh\n          </button>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <button className=\"flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors\">\n            <Download className=\"h-4 w-4\" />\n            Export\n          </button>\n          \n          <button className=\"flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors\">\n            <Filter className=\"h-4 w-4\" />\n            Filter\n          </button>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {metricCards.map((card, index) => (\n          <MetricCard\n            key={index}\n            title={card.title}\n            value={card.value}\n            change={card.change}\n            icon={card.icon}\n            color={card.color}\n            format={card.format}\n          />\n        ))}\n      </div>\n\n      {/* Dashboard Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Store Applications */}\n        <div className=\"lg:col-span-2\">\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <div>\n                <h2 className=\"text-lg font-semibold text-gray-900\">Pending Store Applications</h2>\n                <p className=\"text-sm text-gray-600\">Review and approve new store applications</p>\n              </div>\n              \n              {applications.length > 0 && (\n                <span className=\"bg-yellow-100 text-yellow-800 px-3 py-1 rounded-full text-sm font-medium\">\n                  {applications.length} pending\n                </span>\n              )}\n            </div>\n            \n            {applications.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <CheckCircle className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">No pending applications</p>\n                <p className=\"text-sm text-gray-400\">All store applications have been processed</p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {applications.map(application => (\n                  <StoreApplicationCard\n                    key={application.id}\n                    application={application}\n                    onApprove={handleApproveStore}\n                    onReject={handleRejectStore}\n                    onView={handleViewStore}\n                  />\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Recent Activity */}\n        <div className=\"lg:col-span-1\">\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-6\">Recent Activity</h2>\n            \n            <div className=\"space-y-4\">\n              {recentActivity.map(activity => (\n                <div key={activity.id} className=\"flex items-start gap-3\">\n                  <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                    <Activity className=\"h-4 w-4 text-blue-600\" />\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-medium text-gray-900\">{activity.title}</p>\n                    <p className=\"text-sm text-gray-600 mb-1\">{activity.description}</p>\n                    <p className=\"text-xs text-gray-500\">\n                      {new Intl.RelativeTimeFormat('en').format(\n                        Math.floor((activity.timestamp.getTime() - Date.now()) / (1000 * 60)),\n                        'minute'\n                      )}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Performance Charts */}\n      <div className=\"mt-8 grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Revenue Trend</h3>\n          <div className=\"h-64\">\n            <Suspense fallback={<div className=\"h-full bg-gray-100 rounded animate-pulse\" />}>\n              {/* Chart component would go here */}\n              <div className=\"h-full bg-gradient-to-r from-blue-50 to-green-50 rounded flex items-center justify-center\">\n                <p className=\"text-gray-500\">Revenue Chart</p>\n              </div>\n            </Suspense>\n          </div>\n        </div>\n        \n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Store Locations</h3>\n          <div className=\"h-64\">\n            <Suspense fallback={<div className=\"h-full bg-gray-100 rounded animate-pulse\" />}>\n              {/* Map component would go here */}\n              <div className=\"h-full bg-gradient-to-r from-green-50 to-blue-50 rounded flex items-center justify-center\">\n                <p className=\"text-gray-500\">Interactive Map</p>\n              </div>\n            </Suspense>\n          </div>\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n}